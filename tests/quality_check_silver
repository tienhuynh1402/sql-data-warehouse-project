/*
================================================================================
Script: Data Quality Checks - Bronze & Silver Layers
================================================================================
Purpose:
    This script performs comprehensive data quality validation across bronze
    and silver layers to ensure data integrity, consistency, and completeness.
    
    Check Categories:
    - Primary Key Validation (nulls, duplicates)
    - Data Cleanliness (unwanted spaces, trimming issues)
    - Data Standardization (consistent code values)
    - Referential Integrity (orphaned records)
    - Business Rule Validation (date ranges, calculations)
    
    Expected Result: All queries should return NO ROWS if data quality is good.
    Any returned rows indicate data quality issues requiring attention.

Usage:
    Run each section sequentially to validate data quality at each layer.
    Review any returned results to identify and resolve data quality issues.

================================================================================
*/

-- ═══════════════════════════════════════════════════════════════════════════
-- BRONZE LAYER: CRM Customer Info Validation
-- ═══════════════════════════════════════════════════════════════════════════

PRINT '==================================================';
PRINT 'BRONZE LAYER: CRM Customer Info Checks';
PRINT '==================================================';

-- Check 1.1: Primary Key Validation (Nulls or Duplicates)
-- Expected: No results
PRINT '>> Check 1.1: Primary Key Validation';
SELECT 
    cst_id, 
    COUNT(*) AS duplicate_count
FROM bronze.crm_customer_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- Check 1.2: Unwanted Spaces in First Name
-- Expected: No results
PRINT '>> Check 1.2: Unwanted Spaces - First Name';
SELECT 
    cst_id,
    cst_firstname,
    LEN(cst_firstname) - LEN(TRIM(cst_firstname)) AS space_count
FROM bronze.crm_customer_info
WHERE cst_firstname != TRIM(cst_firstname);

-- Check 1.3: Unwanted Spaces in Last Name
-- Expected: No results
PRINT '>> Check 1.3: Unwanted Spaces - Last Name';
SELECT 
    cst_id,
    cst_lastname,
    LEN(cst_lastname) - LEN(TRIM(cst_lastname)) AS space_count
FROM bronze.crm_customer_info
WHERE cst_lastname != TRIM(cst_lastname);

-- Check 1.4: Unwanted Spaces in Gender
-- Expected: No results
PRINT '>> Check 1.4: Unwanted Spaces - Gender';
SELECT 
    cst_id,
    cst_gndr
FROM bronze.crm_customer_info
WHERE cst_gndr != TRIM(cst_gndr);

-- Check 1.5: Data Standardization - Gender Values
-- Expected: Shows current distinct values (for review)
PRINT '>> Check 1.5: Gender Value Distribution';
SELECT 
    cst_gndr AS original_value,
    COUNT(*) AS record_count
FROM bronze.crm_customer_info
GROUP BY cst_gndr
ORDER BY COUNT(*) DESC;

-- Check 1.6: Data Standardization - Marital Status Values
-- Expected: Shows current distinct values (for review)
PRINT '>> Check 1.6: Marital Status Value Distribution';
SELECT 
    cst_marital_status AS original_value,
    COUNT(*) AS record_count
FROM bronze.crm_customer_info
GROUP BY cst_marital_status
ORDER BY COUNT(*) DESC;


-- ═══════════════════════════════════════════════════════════════════════════
-- BRONZE LAYER: CRM Product Info Validation
-- ═══════════════════════════════════════════════════════════════════════════

PRINT '==================================================';
PRINT 'BRONZE LAYER: CRM Product Info Checks';
PRINT '==================================================';

-- Check 2.1: Primary Key Validation (Nulls or Duplicates)
-- Expected: No results
PRINT '>> Check 2.1: Primary Key Validation';
SELECT 
    prd_id, 
    COUNT(*) AS duplicate_count
FROM bronze.crm_product_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;

-- Check 2.2: Referential Integrity - Orphaned Categories
-- Expected: No results (all products should have valid categories)
PRINT '>> Check 2.2: Orphaned Product Categories';
SELECT 
    prd_id,
    prd_key,
    REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id
FROM bronze.crm_product_info
WHERE REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') NOT IN (
    SELECT DISTINCT id
    FROM bronze.erp_px_cat_g1v2
);

-- Check 2.3: Data Standardization - Product Line Values
-- Expected: Shows current distinct values (for review)
PRINT '>> Check 2.3: Product Line Value Distribution';
SELECT 
    prd_line AS original_value,
    COUNT(*) AS record_count
FROM bronze.crm_product_info
GROUP BY prd_line
ORDER BY COUNT(*) DESC;

-- Check 2.4: Business Rule Validation - Null or Negative Costs
-- Expected: Shows records with data quality issues
PRINT '>> Check 2.4: Null or Negative Product Costs';
SELECT 
    prd_id,
    prd_key,
    prd_nm,
    prd_cost
FROM bronze.crm_product_info
WHERE prd_cost IS NULL OR prd_cost < 0;


-- ═══════════════════════════════════════════════════════════════════════════
-- BRONZE LAYER: CRM Sales Details Validation
-- ═══════════════════════════════════════════════════════════════════════════

PRINT '==================================================';
PRINT 'BRONZE LAYER: CRM Sales Details Checks';
PRINT '==================================================';

-- Check 3.1: Referential Integrity - Orphaned Customer References
-- Expected: No results (all sales should reference valid customers)
PRINT '>> Check 3.1: Orphaned Customer References';
SELECT 
    sls_ord_num,
    sls_cust_id
FROM bronze.crm_sales_details
WHERE sls_cust_id NOT IN (
    SELECT DISTINCT cst_id
    FROM bronze.crm_customer_info
    WHERE cst_id IS NOT NULL
);

-- Check 3.2: Referential Integrity - Orphaned Product References
-- Expected: No results (all sales should reference valid products)
PRINT '>> Check 3.2: Orphaned Product References';
SELECT 
    sls_ord_num,
    sls_prd_key
FROM bronze.crm_sales_details
WHERE sls_prd_key NOT IN (
    SELECT DISTINCT SUBSTRING(prd_key, 7, LEN(prd_key))
    FROM bronze.crm_product_info
);

-- Check 3.3: Business Rule Validation - Invalid Date Formats
-- Expected: No results (all dates should be 8 digits)
PRINT '>> Check 3.3: Invalid Date Formats';
SELECT 
    sls_ord_num,
    sls_ord_dt,
    sls_ship_dt,
    sls_due_dt
FROM bronze.crm_sales_details
WHERE LEN(sls_ord_dt) != 8 
   OR LEN(sls_ship_dt) != 8 
   OR LEN(sls_due_dt) != 8
   OR sls_ord_dt <= 0
   OR sls_ship_dt <= 0
   OR sls_due_dt <= 0;

-- Check 3.4: Business Rule Validation - Sales Calculation Accuracy
-- Expected: Shows records where sales != quantity * price
PRINT '>> Check 3.4: Sales Calculation Discrepancies';
SELECT 
    sls_ord_num,
    sls_quantity,
    sls_price,
    sls_sales,
    (sls_quantity * ABS(sls_price)) AS calculated_sales,
    (sls_sales - sls_quantity * ABS(sls_price)) AS difference
FROM bronze.crm_sales_details
WHERE sls_sales != sls_quantity * ABS(sls_price)
   OR sls_sales IS NULL
   OR sls_sales <= 0;


-- ═══════════════════════════════════════════════════════════════════════════
-- BRONZE LAYER: ERP Customer Demographics Validation
-- ═══════════════════════════════════════════════════════════════════════════

PRINT '==================================================';
PRINT 'BRONZE LAYER: ERP Customer Demographics Checks';
PRINT '==================================================';

-- Check 4.1: Referential Integrity - Orphaned Customer References
-- Expected: Shows ERP customers not in CRM system
PRINT '>> Check 4.1: ERP Customers Not in CRM';
SELECT 
    cid,
    CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
         ELSE cid
    END AS normalized_cid,
    bdate,
    gen
FROM bronze.erp_cust_az12
WHERE CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
           ELSE cid
      END NOT IN (
          SELECT DISTINCT cst_key
          FROM bronze.crm_customer_info
      );

-- Check 4.2: Business Rule Validation - Out of Range Birth Dates
-- Expected: No results (birth dates should be reasonable)
PRINT '>> Check 4.2: Out of Range Birth Dates';
SELECT 
    cid,
    bdate,
    CASE 
        WHEN bdate < '1924-01-01' THEN 'Too Old (>100 years)'
        WHEN bdate > GETDATE() THEN 'Future Date'
    END AS issue_type
FROM bronze.erp_cust_az12
WHERE bdate < '1924-01-01' OR bdate > GETDATE();

-- Check 4.3: Data Standardization - Gender Values
-- Expected: Shows current distinct values (for review)
PRINT '>> Check 4.3: Gender Value Distribution';
SELECT 
    gen AS original_value,
    CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
         WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
         ELSE 'N/A'
    END AS standardized_value,
    COUNT(*) AS record_count
FROM bronze.erp_cust_az12
GROUP BY gen
ORDER BY COUNT(*) DESC;


-- ═══════════════════════════════════════════════════════════════════════════
-- BRONZE LAYER: ERP Location Validation
-- ═══════════════════════════════════════════════════════════════════════════

PRINT '==================================================';
PRINT 'BRONZE LAYER: ERP Location Checks';
PRINT '==================================================';

-- Check 5.1: Referential Integrity - Orphaned Customer References
-- Expected: Shows location records for customers not in CRM
PRINT '>> Check 5.1: Location Records for Non-Existent Customers';
SELECT 
    cid,
    REPLACE(cid, '-', '') AS normalized_cid,
    cntry
FROM bronze.erp_loc_a101
WHERE REPLACE(cid, '-', '') NOT IN (
    SELECT cst_key
    FROM bronze.crm_customer_info
);

-- Check 5.2: Data Standardization - Country Values
-- Expected: Shows current distinct values and their standardized forms
PRINT '>> Check 5.2: Country Value Distribution';
SELECT 
    cntry AS original_value,
    CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
         WHEN TRIM(cntry) IN ('USA', 'US') THEN 'United States'
         WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'N/A'
         ELSE TRIM(cntry)
    END AS standardized_value,
    COUNT(*) AS record_count
FROM bronze.erp_loc_a101
GROUP BY cntry
ORDER BY COUNT(*) DESC;


-- ═══════════════════════════════════════════════════════════════════════════
-- BRONZE LAYER: ERP Product Category Validation
-- ═══════════════════════════════════════════════════════════════════════════

PRINT '==================================================';
PRINT 'BRONZE LAYER: ERP Product Category Checks';
PRINT '==================================================';

-- Check 6.1: Unwanted Spaces in Any Column
-- Expected: No results
PRINT '>> Check 6.1: Unwanted Spaces in Category Data';
SELECT 
    id,
    cat,
    subcat,
    maintenance
FROM bronze.erp_px_cat_g1v2
WHERE cat != TRIM(cat) 
   OR subcat != TRIM(subcat) 
   OR maintenance != TRIM(maintenance);

-- Check 6.2: Data Standardization - Maintenance Values
-- Expected: Shows current distinct values (for review)
PRINT '>> Check 6.2: Maintenance Value Distribution';
SELECT 
    maintenance AS value,
    COUNT(*) AS record_count
FROM bronze.erp_px_cat_g1v2
GROUP BY maintenance
ORDER BY COUNT(*) DESC;


-- ═══════════════════════════════════════════════════════════════════════════
-- SILVER LAYER: Post-Transformation Validation
-- ═══════════════════════════════════════════════════════════════════════════

PRINT '==================================================';
PRINT 'SILVER LAYER: Data Quality Validation';
PRINT '==================================================';

-- Check 7.1: Customer Info - Primary Key Validation
-- Expected: No results
PRINT '>> Check 7.1: Customer Primary Key Validation';
SELECT 
    cst_id, 
    COUNT(*) AS duplicate_count
FROM silver.crm_customer_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- Check 7.2: Customer Info - Unwanted Spaces (should be cleaned)
-- Expected: No results
PRINT '>> Check 7.2: Customer Name Spaces Validation';
SELECT 
    cst_id,
    cst_firstname
FROM silver.crm_customer_info
WHERE cst_firstname != TRIM(cst_firstname);

-- Check 7.3: Customer Info - Standardized Gender Values
-- Expected: Only 'Female', 'Male', 'N/A'
PRINT '>> Check 7.3: Standardized Gender Values';
SELECT 
    cst_gndr AS standardized_value,
    COUNT(*) AS record_count
FROM silver.crm_customer_info
GROUP BY cst_gndr
ORDER BY COUNT(*) DESC;

-- Check 7.4: Product Info - Primary Key Validation
-- Expected: No results
PRINT '>> Check 7.4: Product Primary Key Validation';
SELECT 
    prd_id, 
    COUNT(*) AS duplicate_count
FROM silver.crm_product_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;

-- Check 7.5: Product Info - Null or Negative Costs (should be corrected)
-- Expected: No nulls, no negatives (zeros are acceptable)
PRINT '>> Check 7.5: Product Cost Validation';
SELECT 
    prd_id,
    prd_key,
    prd_cost
FROM silver.crm_product_info
WHERE prd_cost IS NULL OR prd_cost < 0;

-- Check 7.6: Product Info - Standardized Product Line Values
-- Expected: Only standardized values ('Mountain', 'Road', 'Touring', 'Other Sales', 'N/A')
PRINT '>> Check 7.6: Standardized Product Line Values';
SELECT 
    prd_line AS standardized_value,
    COUNT(*) AS record_count
FROM silver.crm_product_info
GROUP BY prd_line
ORDER BY COUNT(*) DESC;

-- Check 7.7: Product Info - Invalid Date Ranges (end date before start date)
-- Expected: No results
PRINT '>> Check 7.7: Product Date Range Validation';
SELECT 
    prd_id,
    prd_key,
    prd_start_dt,
    prd_end_dt,
    DATEDIFF(day, prd_start_dt, prd_end_dt) AS days_difference
FROM silver.crm_product_info
WHERE prd_end_dt < prd_start_dt;

-- Check 7.8: ERP Customer - Out of Range Birth Dates (should be corrected)
-- Expected: No results
PRINT '>> Check 7.8: Birth Date Range Validation';
SELECT 
    cid,
    bdate
FROM silver.erp_cust_az12
WHERE bdate < '1924-01-01' OR bdate > GETDATE();

-- Check 7.9: ERP Customer - Standardized Gender Values
-- Expected: Only 'Female', 'Male', 'N/A'
PRINT '>> Check 7.9: ERP Gender Standardization';
SELECT 
    gen AS standardized_value,
    COUNT(*) AS record_count
FROM silver.erp_cust_az12
GROUP BY gen
ORDER BY COUNT(*) DESC;

PRINT '==================================================';
PRINT 'Data Quality Checks Completed';
PRINT '==================================================';
PRINT 'Review any results returned above.';
PRINT 'No results = Good data quality for that check.';
