/*
================================================================================
Stored Procedure: Load Silver Layer (Bronze -> Silver)
================================================================================
Script Purpose:
    This stored procedure loads and transforms data from the bronze layer into
    the silver layer, performing comprehensive data quality and standardization
    operations across all CRM and ERP tables.
    
    Key Operations:
    - Truncates silver tables before loading (full refresh strategy)
    - Applies data quality rules and validations
    - Standardizes coded values to descriptive text
    - Deduplicates customer records
    - Creates temporal validity for product dimensions
    - Validates and corrects sales calculations
    - Tracks execution time for each table load
    - Implements comprehensive error handling
    
    The silver layer serves as the cleansed, business-ready intermediate layer
    between raw bronze data and analytical gold layer structures.

Parameters:
    None.
    This stored procedure does not accept any parameters or return any values.

Usage Example:
    EXEC silver.load_silver;

Dependencies:
    - All bronze layer tables must be loaded before execution
    - Silver layer tables must exist before execution
    - Requires appropriate permissions on bronze and silver schemas

Data Transformations:
    CRM System:
        - Customer deduplication (most recent record)
        - Gender and marital status standardization
        - Product key parsing and category extraction
        - Product line code expansion
        - Date conversion and validation for sales transactions
        - Sales amount and price validation/correction
    
    ERP System:
        - Customer ID normalization (prefix removal, hyphen cleaning)
        - Birth date validation
        - Country code standardization
        - Gender format normalization

================================================================================
*/

CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
    DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME;
    
    BEGIN TRY
        SET @batch_start_time = GETDATE();
        PRINT '====================================';
        PRINT 'Loading Silver Layer';
        PRINT '====================================';
        
        -- ======================================================
        -- CRM DATA LOADING SECTION
        -- ======================================================
        PRINT '------------------------------------';
        PRINT 'Loading CRM Tables';
        PRINT '------------------------------------';
        
        -- Load CRM Customer Information (with deduplication)
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: silver.crm_customer_info';
        TRUNCATE TABLE silver.crm_customer_info;
        PRINT '>> Inserting Data Into: silver.crm_customer_info';

        INSERT INTO silver.crm_customer_info (
            cst_id,
            cst_key,
            cst_firstname,
            cst_lastname,
            cst_marital_status,
            cst_gndr,
            cst_create_date
        )
        SELECT 
            cst_id,
            cst_key,
            TRIM(cst_firstname)                                                           AS cst_firstname,
            TRIM(cst_lastname)                                                            AS cst_lastname,
            -- Standardize marital status codes to full descriptive values
            CASE WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
                 WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
                 ELSE 'N/A'
            END                                                                           AS cst_marital_status,
            -- Standardize gender codes to full descriptive values
            CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
                 WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
                 ELSE 'N/A'
            END                                                                           AS cst_gndr,
            cst_create_date
        FROM (
            -- Deduplicate: Keep only the most recent record for each customer
            SELECT 
                *,
                ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC)    AS flag_last
            FROM bronze.crm_customer_info
            WHERE cst_id IS NOT NULL
        ) t
        WHERE flag_last = 1;
        
        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS VARCHAR) + ' seconds';
        PRINT '------------------------------------';
        
        -- Load CRM Product Information (with temporal validity)
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: silver.crm_product_info';
        TRUNCATE TABLE silver.crm_product_info;
        PRINT '>> Inserting Data Into: silver.crm_product_info';
        
        INSERT INTO silver.crm_product_info (
            prd_id,
            cat_id,
            prd_key,
            prd_nm,
            prd_cost,
            prd_line,
            prd_start_dt,
            prd_end_dt
        )
        SELECT 
            prd_id,
            -- Extract category from first 5 chars of product key, replace hyphens with underscores
            REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_')                                  AS cat_id,
            -- Extract actual product identifier (after position 6)
            SUBSTRING(prd_key, 7, LEN(prd_key))                                           AS prd_key,
            prd_nm,
            -- Default null costs to zero for consistent calculations
            ISNULL(prd_cost, 0)                                                           AS prd_cost,
            -- Standardize product line codes to full descriptive names
            CASE UPPER(TRIM(prd_line))
                 WHEN 'M' THEN 'Mountain'
                 WHEN 'R' THEN 'Road'
                 WHEN 'T' THEN 'Touring'
                 WHEN 'S' THEN 'Other Sales'
                 ELSE 'N/A'
            END                                                                           AS prd_line,
            CAST(prd_start_dt AS DATE)                                                    AS prd_start_dt,
            -- Calculate end date as one day before the next version's start date
            -- NULL end date indicates current/active version
            CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key 
                                           ORDER BY prd_start_dt) - 1 AS DATE)           AS prd_end_dt
        FROM bronze.crm_product_info;
        
        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS VARCHAR) + ' seconds';
        PRINT '------------------------------------';

        -- Load CRM Sales Details (with validation and correction)
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: silver.crm_sales_details';
        TRUNCATE TABLE silver.crm_sales_details;
        PRINT '>> Inserting Data Into: silver.crm_sales_details';
        
        INSERT INTO silver.crm_sales_details (
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
            sls_ord_dt,
            sls_ship_dt,
            sls_due_dt,
            sls_sales,
            sls_quantity,
            sls_price
        )
        SELECT 
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
            -- Convert integer date (YYYYMMDD) to DATE, handle invalid formats
            CASE WHEN sls_ord_dt <= 0 OR LEN(sls_ord_dt) != 8 THEN NULL
                 ELSE CAST(CAST(sls_ord_dt AS VARCHAR) AS DATE)
            END                                                                           AS sls_ord_dt,
            CASE WHEN sls_ship_dt <= 0 OR LEN(sls_ship_dt) != 8 THEN NULL
                 ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
            END                                                                           AS sls_ship_dt,
            CASE WHEN sls_due_dt <= 0 OR LEN(sls_due_dt) != 8 THEN NULL
                 ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
            END                                                                           AS sls_due_dt,
            -- Validate sales amount: recalculate if null, negative, or doesn't match quantity * price
            CASE WHEN sls_sales IS NULL 
                      OR sls_sales <= 0 
                      OR sls_sales != sls_quantity * ABS(sls_price)
                 THEN sls_quantity * ABS(sls_price)
                 ELSE sls_sales
            END                                                                           AS sls_sales,
            sls_quantity,
            -- Derive price from sales/quantity if price is null or invalid
            CASE WHEN sls_price IS NULL OR sls_price <= 0
                 THEN sls_sales / NULLIF(sls_quantity, 0)
                 ELSE sls_price
            END                                                                           AS sls_price
        FROM bronze.crm_sales_details;
        
        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS VARCHAR) + ' seconds';
        PRINT '------------------------------------';

        -- ======================================================
        -- ERP DATA LOADING SECTION
        -- ======================================================
        PRINT '------------------------------------';
        PRINT 'Loading ERP Tables';
        PRINT '------------------------------------';
        
        -- Load ERP Customer Demographics
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: silver.erp_cust_az12';
        TRUNCATE TABLE silver.erp_cust_az12;
        PRINT '>> Inserting Data Into: silver.erp_cust_az12';
        
        INSERT INTO silver.erp_cust_az12 (
            cid,
            bdate,
            gen
        )
        SELECT 
            -- Remove legacy "NAS" prefix from customer IDs for standardization
            CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
                 ELSE cid
            END                                                                           AS cid,
            -- Validate birth date: set to NULL if in the future (data quality issue)
            CASE WHEN bdate > GETDATE() THEN NULL
                 ELSE bdate
            END                                                                           AS bdate,
            -- Standardize gender values to consistent format (handles both codes and full text)
            CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female' 
                 WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male' 
                 ELSE 'N/A'
            END                                                                           AS gen
        FROM bronze.erp_cust_az12;
        
        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS VARCHAR) + ' seconds';
        PRINT '------------------------------------';

        -- Load ERP Customer Location
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: silver.erp_loc_a101';
        TRUNCATE TABLE silver.erp_loc_a101;
        PRINT '>> Inserting Data Into: silver.erp_loc_a101';
        
        INSERT INTO silver.erp_loc_a101 (
            cid,
            cntry
        )
        SELECT 
            -- Normalize customer ID by removing hyphens
            REPLACE(cid, '-', '')                                                         AS cid,
            -- Standardize country codes to full descriptive names
            CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
                 WHEN TRIM(cntry) IN ('USA', 'US') THEN 'United States'
                 WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'N/A'
                 ELSE TRIM(cntry)
            END                                                                           AS cntry
        FROM bronze.erp_loc_a101;
        
        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS VARCHAR) + ' seconds';
        PRINT '------------------------------------';

        -- Load ERP Product Category (reference data pass-through)
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: silver.erp_px_cat_g1v2';
        TRUNCATE TABLE silver.erp_px_cat_g1v2;
        PRINT '>> Inserting Data Into: silver.erp_px_cat_g1v2';
        
        INSERT INTO silver.erp_px_cat_g1v2 (
            id,
            cat,
            subcat,
            maintenance
        )
        SELECT 
            id,
            cat,
            subcat,
            maintenance
        FROM bronze.erp_px_cat_g1v2;
        
        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS VARCHAR) + ' seconds';
        PRINT '------------------------------------';
        
        -- Calculate total batch duration
        SET @batch_end_time = GETDATE();
        PRINT '==========================================';
        PRINT 'Loading Silver Layer is Completed';
        PRINT '    - Total Load Duration: ' + CAST(DATEDIFF(second, @batch_start_time, @batch_end_time) AS VARCHAR) + ' seconds';
        PRINT '==========================================';
        
    END TRY
    BEGIN CATCH
        -- Error handling: Capture and display error details
        PRINT '==========================================';
        PRINT 'ERROR OCCURRED DURING LOADING SILVER LAYER';
        PRINT 'Error Message: ' + ERROR_MESSAGE();
        PRINT 'Error Number: ' + CAST(ERROR_NUMBER() AS NVARCHAR);
        PRINT 'Error State: ' + CAST(ERROR_STATE() AS NVARCHAR);
        PRINT '==========================================';
    END CATCH
END
GO

-- Execute the stored procedure
EXEC silver.load_silver;
